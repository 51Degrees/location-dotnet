parameters:
- name: targetPublishConfig # Target build configuration to publish
  type: string
  default: 'Release'
- name: imageName # Name of the agent to work on
- name: templates

stages:
- stage: CreatePackages

  variables: 
    - group: CertificateVariables
    - group: CIAutomation
    # Because we are pulling in a group, we need to define local variables 
    # using the name/value syntax.
    - name: RestoreBuildProjects
      value: '**/*.sln'
      # Projects to be published as NuGet packages
    - name: PublishProjects
      value: |
        **/*.csproj
        !**/*[Tt]ests/**/*.csproj
        !**/*[Ee]xamples/**/*.csproj
      # Access token for the git repository. Used by the git tag task.
    - name: system_accesstoken
      value: $(System.AccessToken)

  jobs:
  - template: shared-git-version-job.yml@${{ parameters.templates }}
    parameters:
      imageName: ${{ parameters.imageName }}

  - job: CreatePackages
    displayName: Create Packages
    dependsOn: Versioning
    condition: and(succeeded(), ne(variables['CreatePackages'], 'Off'))

    variables:
      GitVersionNuGetVer: $[ dependencies.Versioning.outputs['SetGitVersionVars.GitVersionNuGetVer'] ]
      GitVersionSemVer: $[ dependencies.Versioning.outputs['SetGitVersionVars.GitVersionSemVer'] ]

    pool:
      vmImage: ${{ parameters.imageName }}
    
    steps:  
    # The lines below are needed to allow the pipeline access to the
    # OAuth access token that controls write access to the git repository. 
    # (Required for GitTag task)
    - checkout: self
      lfs: true
      submodules: recursive
      persistCredentials: true
    # Useful snippets for debugging.
    # List all contents of a directory:
    #- script: |
    #    ls -d $(System.ArtifactsDirectory)/*
    
    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet Packages'
      retryCountOnTaskFailure: 3
      inputs:
        command: 'restore'
        projects: '$(RestoreBuildProjects)'
        feedsToUse: 'select'
        vstsFeed: '$(InternalFeedId)'
        #'d2431f86-c1e6-4d8b-8d27-311cf3614847'
     
    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: '$(RestoreBuildProjects)'
        arguments: '-c ${{ parameters.targetPublishConfig }} --no-restore'
        testRunTitle: '${{ parameters.targetPublishConfig }}'
    
    # Index and publish symbol file to allow debugging.
    - task: PublishSymbols@2
      displayName: 'Publish Symbols'
      inputs: 
        SearchPattern: '**/bin/**/*.pdb'
        SymbolServerType: 'TeamServices'
        SymbolsVersion: '$(GitVersionSemVer)'
      condition: and(succeeded(), eq('${{ parameters.targetPublishConfig }}', 'Debug'))
    
    # The nuget package version uses the GitVersionSemVer variable.
    # This has been set by the GitVersion task above. 
    - task: DotNetCoreCLI@2
      displayName: 'Build NuGet Package'
      inputs:
        command: 'custom'
        projects: $(PublishProjects)
        custom: 'pack'
        arguments: '--output $(System.ArtifactsDirectory) --configuration ${{ parameters.targetPublishConfig }} /p:PackageVersion=$(GitVersionSemVer) /p:Version=$(GitVersionSemVer)'
   
    - template: dotnet/shared-code-signing-steps.yml@${{ parameters.templates }}
      parameters:
        codeSigningPassword: $(CodeSigningCertPassword)
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()
      
  - template: shared-git-tag-job.yml@${{ parameters.templates }}
    parameters:
      imageName: ${{ parameters.imageName }}
      jobDependencies: [Versioning,CreatePackages]
      publishConfig: '${{ parameters.targetPublishConfig }}'