trigger:
  - master
  - develop
  - release/*  
    
variables: 
  - group: CertificateVariables
  # Because we are pulling in a group, we need to define local variables 
  # using the name/value syntax.
  - name: RestoreBuildProjects
    value: '**/*.sln'
    # Projects to be published as NuGet packages
  - name: PublishProjects
    value: '**/*.csproj;!**/*[Tt]ests/**/*.csproj;!**/*[Ee]xamples/**/*.csproj'
    # Access token for the git repository. Used by the git tag task.
  - name: system_accesstoken
    value: $(System.AccessToken)
        
pool:
  vmImage: 'windows-2019'

steps:  
# The lines below are needed to allow the pipeline access to the
# OAuth access token that controls write access to the git repository. 
# (Required for GitTag task)
- checkout: self
  lfs: true
  submodules: recursive
  persistCredentials: true
# Useful snippets for debugging.
# List all contents of a directory:
#- script: |
#    ls -d $(System.ArtifactsDirectory)/*

# Use a script to set the BuildConfiguration variable.
# If building from master or a release branch then build
# the Release configuration. Otherwise, build the Debug configuration.
- script: |        
    echo Current branch is "%BUILD_SOURCEBRANCH%"
    echo %BUILD_SOURCEBRANCH% |findstr /b "refs/heads/release/*" > nul && (
      set ISRELEASEBRANCH=true
    ) || (
      set ISRELEASEBRANCH=false
    )
    if "%BUILD_SOURCEBRANCHNAME%" == "master" (
        SET BUILD_CONFIG=Release
    ) else if %ISRELEASEBRANCH% == true (
        SET BUILD_CONFIG=Release
    ) else (
        SET BUILD_CONFIG=Debug
    )
    echo ##vso[task.setvariable variable=BuildConfiguration]%BUILD_CONFIG%
    echo BuildConfiguration set to '%BUILD_CONFIG%'
  displayName: 'Determine Build Configuration'

- task: gittools.gitversion.gitversion-task.GitVersion@4
  displayName: 'Determine Version Number'
  # Give this task a name so we can use the variables it sets later. 
  name: GitVersion
  inputs:
    preferBundledVersion: false

- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet Packages'
  inputs:
    command: 'restore'
    projects: '$(RestoreBuildProjects)'
    feedsToUse: 'select'
    vstsFeed: 'pipeline-insider'
    #'d2431f86-c1e6-4d8b-8d27-311cf3614847'
 
- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: '$(RestoreBuildProjects)'
    arguments: '-c $(BuildConfiguration) --no-restore'
    testRunTitle: '$(BuildConfiguration)'

# Index and publish symbol file to allow debugging.
- task: PublishSymbols@2
  displayName: 'Publish Symbols'
  inputs: 
    SearchPattern: '**/bin/**/*.pdb'
    SymbolServerType: 'TeamServices'
    SymbolsVersion: '$(GitVersion.NuGetVersion)'

# The nuget package version uses the BUILD_BUILDNUMER environment variable.
# This has been set by the GitVersion task above.
- task: DotNetCoreCLI@2
  displayName: 'Build NuGet Package'
  inputs:
    command: 'pack'
    packagesToPack: '$(PublishProjects)'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'BUILD_BUILDNUMBER'
    
# The secure file to download will be stored in the 
# Pipelines/Library/SecureFiles section in Azure DevOps.
- task: DownloadSecureFile@1
  displayName: 'Download Code Signing Certificate'
  name: CodeSigningCert
  inputs:
    secureFile: ' 51Degrees.mobi Code Signing Certificate.pfx'

# Sign the Nuget package with the file downloaded previously.
# The password is stored in the Pipelines/Library/VariableGroups
# section in Azure DevOps.
- task: NuGetCommand@2
  displayName: 'Sign NuGet Package'
  inputs:
    command: custom
    arguments: 'sign $(System.ArtifactsDirectory)\*.nupkg -CertificatePath "$(CodeSigningCert.secureFilePath)" -CertificatePassword $(CodeSigningCertPassword) -Timestamper http://timestamp.digicert.com'

# Add a tag to the git repository with the version number of
# the package that has just been published
- task: ATP.ATP-GitTag.GitTag.GitTag@5
  displayName: 'Tag Repo With Version Number'
  inputs:
    tagUser: 'Azure DevOps'
    tagEmail: 'CIUser@51Degrees.com'    
  condition: succeeded()

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()